<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Tadej's Blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-02-08T04:38:55-05:00</updated>
<id>/</id>
<author>
  <name>Tadej Slamic</name>
  <uri>/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[Android, monkeys and stress testing]]></title>
 <link rel="alternate" type="text/html" href="/android-monkeys-stress-testing/" />
  <id>/android-monkeys-stress-testing</id>
  <published>2015-02-08T00:00:00-05:00</published>
  <updated>2015-02-08T00:00:00-05:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;As end users, we’re terrible. &lt;/p&gt;

&lt;p&gt;We’ll microwave a fork, pull doors with a big red sign saying push and sue a company for serving us a hot cup of coffee. We’ll grab a supposedly waterproof phone and toss it in a full tub. Then we’ll go online and laugh at the schmuck trying to drill through a wall he’s standing on. &lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
    &lt;img src=&quot;http://i.imgur.com/X17puIB.gif&quot; /&gt;
    &lt;figcaption&gt;Can you imagine designing a product that can handle such superusers? &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;Creating software with good user experience is hard. Relying on intuition is naive, but expecting a product to be used in a predictable (or, y’know, logical) manner is just wrong. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stress testing&lt;/em&gt; puts great emphasis on availability and error handling, under a load few consider normal. It indicates just how robust our product really is.&lt;/p&gt;

&lt;p&gt;Android - or, more precisely, its debug bridge -  has a very handy tool called &lt;em&gt;the monkey&lt;/em&gt;. It’s purpose is to stress-test your app by generating pseudo-random user events in a repeatable manner. It’s as if a monkey was ordered to test your app. It’ll tap, swipe, click and drag no matter what’s on the screen. &lt;/p&gt;

&lt;p&gt;A typical command to start the monkey is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb shell monkey -p your.package.name 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;-p&lt;/code&gt; denotes your package name. &lt;code&gt;5000&lt;/code&gt; is the amount of events generated. &lt;/p&gt;

&lt;p&gt;Another useful option is the seed parameter. If you re-run the monkey with the same seed value, it will generate the exact same sequence of events. Just add the &lt;code&gt;-s &amp;lt;number&amp;gt;&lt;/code&gt; option to your command: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb shell monkey -p your.package.name -s &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is handy when you encounter crashes while using the monkey. Apply the fix, re-run the monkey with the same seed value and validate.&lt;/p&gt;

&lt;p&gt;Sometimes, you’ll have multiple devices to run the monkey on. Suppose &lt;code&gt;adb devices&lt;/code&gt; yields&lt;/p&gt;

&lt;pre&gt;
List of devices attached 
192.168.56.102:5555		device
0749e0c421157449		device
017961c7d19f9615		device
&lt;/pre&gt;

&lt;p&gt;Executing any adb shell command results in &lt;code&gt;error: more than one device and emulator&lt;/code&gt;. You need to explicitly tell the adb which device or emulator one to use, by using &lt;code&gt;-s &amp;lt;serialNumber&amp;gt;&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb -s 192.168.56.102:5555 shell monkey -p your.package.name -s &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will run the monkey on a device or emulator with a serial number &lt;code&gt;192.168.56.102:5555&lt;/code&gt;. To run the monkey on all attached emulators and devices, you have to execute a separate command for each one. &lt;/p&gt;

&lt;p&gt;Numerous other options are &lt;a href=&quot;http://developer.android.com/tools/help/monkey.html&quot;&gt;available&lt;/a&gt; to fine-tune the monkey. Perhaps &lt;code&gt;--hprof&lt;/code&gt; is an option worth mentioning. If set, it dumps the heap immediately before and after running. This can be quite useful for memory profiling. &lt;/p&gt;

&lt;p&gt;However, according to this &lt;a href=&quot;http://stackoverflow.com/a/8433740/905349&quot;&gt;old post&lt;/a&gt;, the &lt;code&gt;--hprof&lt;/code&gt; option seems to be ignored. Moreover, the dumps are put in &lt;code&gt;data/misc&lt;/code&gt; folder. It may be impossible to extract them.&lt;/p&gt;

&lt;p&gt;To tackle the two problems, running the monkey on multiple devices and making heap dumps, I’ve created Dumpey, a collection of (currently) three UNIX scripts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;monkey&lt;/code&gt; capable of running the monkey on all attached devices/emulators&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;memdmp&lt;/code&gt; capable of extracting and converting heap dumps from a device/emulator to a local drive&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dumpey&lt;/code&gt; capable of extracting and converting heap dumps before and after running the monkey, on all attached devices/emulators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Dumpey is easy. For example&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./monkey -p your.package.name -s &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; -e 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;runs the monkey on all attached devices with a seed number &lt;code&gt;12345&lt;/code&gt;, generating &lt;code&gt;5000&lt;/code&gt; random events. &lt;/p&gt;

&lt;p&gt;To avoid using DDMS to do a heap dump, use &lt;code&gt;memdmp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./memdmp -s SH48HWM03500 -p your.package.name -f heapdumps/my_heap_dump.hprof&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will extract a converted memory heap dump to &lt;code&gt;heapdumps/my_heap_dump.hprof&lt;/code&gt; file. All you have to do is open it with MAT.&lt;/p&gt;

&lt;p&gt;Combine memory dumps and monkey with &lt;code&gt;dumpey&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./dumpey -p your.package.name -bad heapdumps/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This extracts converted memory heap dumps, runs the monkey, and extracts converted memory heap dumps again. It does this on all attached devices or emulators. If, for example, you only have one device attached, &lt;code&gt;SH48HWM03500&lt;/code&gt;, then running &lt;code&gt;dumpey&lt;/code&gt; with the above command will generate two files in &lt;code&gt;heapdumps&lt;/code&gt; folder: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SH48HWM03500-before.hprof&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SH48HWM03500-after.hprof&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the names suggest, they are converted memory heap dumps from a specific device done before and after running the monkey. Again, all you have to do is open them in MAT. &lt;/p&gt;

&lt;p&gt;To read more about Dumpey, visit the &lt;a href=&quot;https://github.com/tslamic/Dumpey&quot;&gt;Github repo&lt;/a&gt;. Happy stress testing!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/android-monkeys-stress-testing/&quot;&gt;Android, monkeys and stress testing&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on February 08, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Leaving London]]></title>
 <link rel="alternate" type="text/html" href="/leaving-london/" />
  <id>/leaving-london</id>
  <published>2013-11-17T00:00:00-05:00</published>
  <updated>2013-11-17T00:00:00-05:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;About a year ago, I bought a one way ticket to London.&lt;/p&gt;

&lt;p&gt;I had a job waiting for me and all I had to do was to show up. Until then, I was sure the place I was living in is a slow-paced, boring and futureless town that will never become a city. I wanted to get out.&lt;/p&gt;

&lt;p&gt;After buying the ticket, reality kicked in. I became sentimental and hesitant. I’m leaving my family. I’m leaving my friends. The place I grow up in, the forests, mountains and fresh air.  Mom’s dishes and nagging. Soccer after work and drinks in my favourite bar. The smell of freshly cut grass. The sun. Half an hour drive either to the snowy slopes or good enough beach. &lt;/p&gt;

&lt;p&gt;It sure isn’t the most opportunistic and ambitious little town. But it’s &lt;em&gt;home&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It was cold when I landed in Stansted. Looking through the dirty train window, I was petrified. Will I blend in with the new coworkers? Will I be up to the task?&lt;/p&gt;

&lt;p&gt;It all turned out great. Friendly, talkative and cool coworkers from all over the world. Different language and environment. I was put out of my comfort zone. While easing in, I was learning, progressing and evolving. I became more confident in my knowledge and the code I wrote. I learned to use new tools and adopted new practices. Cut down the buzzwords when talking to non-tech people. I stopped waving my hands all the time. Do presentations!&lt;/p&gt;

&lt;p&gt;One thing I picked up is for certain. You can never &lt;em&gt;learn&lt;/em&gt; and &lt;em&gt;know&lt;/em&gt; enough. Not only from books, articles and smart people - you can learn from &lt;em&gt;anyone&lt;/em&gt;. Just pay attention and be open minded. Always think about the advice you are given, however stupid or useless you think it is. And &lt;em&gt;never&lt;/em&gt; judge a book by its covers. Literally and metaphorically.&lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
     &lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2011/02/81.jpg&quot; /&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;I miss home. But I have grown as a person and that alone has made the move worthy. I learned. Experienced. And I don’t want to stop doing that. That’s why I’m leaving. I just started my new job in Dublin. I’m scared, but eager to learn.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/leaving-london/&quot;&gt;Leaving London&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on November 17, 2013.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[To Center A Button]]></title>
 <link rel="alternate" type="text/html" href="/can-you-center-a-button/" />
  <id>/can-you-center-a-button</id>
  <published>2013-10-12T00:00:00-04:00</published>
  <updated>2013-10-12T00:00:00-04:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;Carloss Sessa of &lt;a href=&quot;http://www.amazon.com/50-Android-Hacks-Carlos-Sessa/dp/1617290564&quot;&gt;50 Android Hacks&lt;/a&gt; starts off with an interesting problem: how to center a button that is 50% of its parent width?&lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
    &lt;img src=&quot;http://i.imgur.com/DW6JWEo.png&quot; /&gt;
    &lt;figcaption&gt;Pretty cool Android phone, huh?&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;It’s easy to center a generic button. Using &lt;code&gt;FrameLayout&lt;/code&gt;, one could simply set the appropriate layout gravity:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;FrameLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;default_schema&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But how to set the button width to 50% of its parent? I decided to create a custom &lt;code&gt;Button&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When creating custom views, you usually want to override some &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html&quot;&gt;standard methods&lt;/a&gt; the framework uses. There are two I could consider in this case: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;onMeasure&lt;/code&gt; determines the size requirements for this view and all of its children&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;onLayout&lt;/code&gt; assigns a size and position to all of its children.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because the parent layout already provides the position I’m after, &lt;code&gt;onMeasure&lt;/code&gt; will suffice.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CenteredButton&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Constructors ommited for clarity.&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halfParentWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;setMeasuredDimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;halfParentWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMeasuredHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The custom &lt;code&gt;onMeasure&lt;/code&gt; is straightforward: after invoking &lt;code&gt;super&lt;/code&gt;, which provides initial measurements, we get the parent width, halve it and apply the result. Then, we tell the XML layout to use it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;FrameLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;default_schema&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;path.to.CenteredButton&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Button&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works! However, there’s a slight hiccup - the text is not centered. Applying &lt;code&gt;android:gravity=&quot;center&quot;&lt;/code&gt; doesn’t work:&lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
    &lt;img src=&quot;http://i.imgur.com/4huD0rH.png&quot; /&gt;
    &lt;figcaption&gt;&quot;Button&quot; text is not centered.&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;Darn &lt;code&gt;super.onMeasure&lt;/code&gt;! A closer look at the &lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.2_r1/android/widget/Button.java/&quot;&gt;source code&lt;/a&gt; reveals a simple text like “Button” is drawn with the help of a &lt;code&gt;BoringLayout&lt;/code&gt;. The layout is also responsible for positioning the text based on the available height, width and gravity. &lt;/p&gt;

&lt;p&gt;Since I only change the width after &lt;code&gt;super.onMeasure&lt;/code&gt;, it has no effect to the initially calculated dimensions and position.&lt;/p&gt;

&lt;p&gt;Is there a way to halve the width before &lt;code&gt;super.onMeasure&lt;/code&gt;? Enter &lt;a href=&quot;http://developer.android.com/reference/android/view/View.MeasureSpec.html&quot;&gt;MeasureSpec&lt;/a&gt;. Scary documentation hides its simple nature: the three modes, &lt;code&gt;AT_MOST&lt;/code&gt;, &lt;code&gt;UNSPECIFIED&lt;/code&gt; and &lt;code&gt;EXACTLY&lt;/code&gt;, are a rough translation of the familiar &lt;code&gt;wrap_content&lt;/code&gt;, &lt;code&gt;match_parent&lt;/code&gt; and a specific size, e.g. &lt;code&gt;200dp&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Two encoded values of the &lt;code&gt;onMeasure&lt;/code&gt; method, &lt;code&gt;widthMeasureSpec&lt;/code&gt; and &lt;code&gt;heightMeasureSpec&lt;/code&gt; present the &lt;code&gt;MeasureSpec&lt;/code&gt; values from its parent View. This is handy, we can easily extract the parent width from it: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we could modify the &lt;code&gt;widthMeasureSpec&lt;/code&gt; to be half its parent width, and pass it to the &lt;code&gt;super.onMeasure&lt;/code&gt;, our work would be done. Fortunately, that’s easy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halfWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newMeasureSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;halfWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXACTLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mission accomplished! &lt;/p&gt;

&lt;p&gt;Of course, Carlos did things a bit differently. To see his solution, go and buy his book.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/can-you-center-a-button/&quot;&gt;To Center A Button&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on October 12, 2013.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[View Animations On Android]]></title>
 <link rel="alternate" type="text/html" href="/view-animations-on-android/" />
  <id>/view-animations-on-android</id>
  <published>2013-10-06T00:00:00-04:00</published>
  <updated>2013-10-06T00:00:00-04:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;The Android framework provides two animation systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Property animation (introduced in Android 3.0)&lt;/li&gt;
  &lt;li&gt;View animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While property animation system is more flexible, offers more features and generally has better performance, the view animation system takes less time to setup and requires less code to write. If it accomplishes everything you need to do, there is no need to use the property animation system.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to focus on the basics of the latter one.&lt;/p&gt;

&lt;p&gt;The view animation system is used to perform &lt;em&gt;tweened&lt;/em&gt; animation on views. Tween stands for “in-between” and refers to the creation of successive frames of animation between the first and the last frame.&lt;/p&gt;

&lt;p&gt;It can perform a series of simple transformations on a &lt;code&gt;View&lt;/code&gt; object, changing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;position&lt;/li&gt;
  &lt;li&gt;size&lt;/li&gt;
  &lt;li&gt;rotation&lt;/li&gt;
  &lt;li&gt;transparency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system lives in the &lt;code&gt;android.view.animation&lt;/code&gt; package, with &lt;code&gt;Animation&lt;/code&gt;, &lt;code&gt;AnimationSet&lt;/code&gt; and &lt;code&gt;Interpolator&lt;/code&gt; being the juicy parts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Animation&lt;/code&gt; class is responsible for a single animation. If our animation should change e.g. position &lt;em&gt;and&lt;/em&gt; transparency, we’d have to use the &lt;code&gt;AnimationSet&lt;/code&gt; class, since it represents a group of animations that should be played together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Interpolator&lt;/code&gt; defines the rate of change of an animation. We can specify, for example, how fast something is going to fade out or if the animation should be accelerating, decelerating, etc.&lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
    &lt;a href=&quot;http://cogitolearning.co.uk/?p=1078&quot; target=&quot;_blank&quot;&gt;
      &lt;img src=&quot;http://i.imgur.com/xVlimsR.png&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Rate of change for some interpolators.&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;Constructing an &lt;code&gt;Animation&lt;/code&gt; is simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlphaAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInterpolator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AccelerateInterpolator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember the simple transformations we’re able to do: position, size, rotation and transparency? Android provides an implementation for each one, respectively:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;TranslateAnimation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ScaleAnimation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;RotateAnimation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;AlphaAnimation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, we’re using &lt;code&gt;AlphaAnimation&lt;/code&gt; which is used for transparency transformations. The arguments, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;, simply mean we wish the opacity to go from 100% to 0% - we want the view to fade out.&lt;/p&gt;

&lt;p&gt;The second line of our example sets the &lt;code&gt;Interpolator&lt;/code&gt;. Again, to make things easier for us, the package includes several subclasses specifying various speed curves. We’ve randomly chosen &lt;code&gt;AccelerateInterpolator&lt;/code&gt;, which tells a transformation to start slow, then speed up. By default, every Animation uses a &lt;code&gt;LinearInterpolator&lt;/code&gt;. Lastly, we set the millisecond duration for our animation to run.&lt;/p&gt;

&lt;p&gt;Animations can be defined by either code or XML. Android designates a special folder where XML files should live: &lt;code&gt;res/anim&lt;/code&gt;. Let’s create a file called &lt;code&gt;res/anim/fade_out.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:interpolator=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@interpolator/accelerate_quad&amp;quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;android:fromAlpha=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:toAlpha=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use it, `AnimationUtils class provides a method that constructs the Animation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnimationUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fade_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Suppose we wish to - besides fading out - shrink our view. Recall that in order to execute two or more animations at the same time, we have to use &lt;code&gt;AnimationSet&lt;/code&gt;. This is as simple as creating an &lt;code&gt;Animation&lt;/code&gt; and adding it to the &lt;code&gt;AnimationSet&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// suppose fade is defined as in the code example above&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shrink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ScaleAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shrink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnimationSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnimationSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shrink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// suppose view variable exist, and points to a View instance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you do not wish to run all animations in the set at the same time, you can specifying the &lt;em&gt;start offset&lt;/em&gt;. &lt;code&gt;fade&lt;/code&gt; will run 1000 milliseconds. In order for &lt;code&gt;shrink&lt;/code&gt; to be executed afterwards, it needs to wait 1000 millis:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;shrink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStartOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Converting everything to XML yields:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;set&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;alpha&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:fromAlpha=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:toAlpha=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:interpolator=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@android:interpolator/accelerate_quad&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scale&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:fromXScale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:toXScale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:fromYScale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:toYScale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:startOffset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To conclude this rudimentary introduction to view animation, an interface is worth mentioning: &lt;code&gt;AnimationListener&lt;/code&gt;. Suppose we wish to hide our view after an animation completes or just listen to animation events. All we have to do is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlphaAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAnimationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AnimationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something when fadeOut starts&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationRepeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do something if fadeOut is repeated&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVisibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INVISIBLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you wish to spice things up by browsing through some actual code, I’ve created a simple app showing random View animations. You can find it &lt;a href=&quot;https://github.com/tslamic/AndroidExamples/tree/master/SimpleAnimationsExample&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/view-animations-on-android/&quot;&gt;View Animations On Android&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on October 06, 2013.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Two's Complement And Absolute Values]]></title>
 <link rel="alternate" type="text/html" href="/twos-complement-and-absolute-values/" />
  <id>/twos-complement-and-absolute-values</id>
  <published>2013-07-21T00:00:00-04:00</published>
  <updated>2013-07-21T00:00:00-04:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;If I ask you what the result of &lt;code&gt;Math.abs(-10)&lt;/code&gt; is, would you guess it’s &lt;code&gt;10&lt;/code&gt;? How about &lt;code&gt;Math.abs(-2147483648)&lt;/code&gt;? If you think the answer is &lt;code&gt;2147483648&lt;/code&gt;, you’re wrong.&lt;/p&gt;

&lt;center&gt;
&lt;figure&gt;
&lt;img src=&quot;http://karengately.files.wordpress.com/2011/10/gasp.jpg&quot; /&gt;
&lt;figcaption&gt;What!?&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

&lt;h3 id=&quot;how-it-all-starts&quot;&gt;How it all starts&lt;/h3&gt;

&lt;p&gt;A bit can hold only one of two values, say &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. An 8-bit value, for example, is 
a combination of 8 bits &lt;em&gt;glued together&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
001: [0] [0] [0] [0] [0] [0] [0] [0]
002: [0] [0] [0] [0] [0] [0] [0] [1]
003: [0] [0] [0] [0] [0] [0] [1] [0]
004: [0] [0] [0] [0] [0] [0] [1] [1]
// ...
256: [1] [1] [1] [1] [1] [1] [1] [1]
&lt;/pre&gt;

&lt;p&gt;There are 256 possible values. Being presented with the table above and no additional information, a natural question arises: &lt;em&gt;what do this combinations of bits represent?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Knowing computers operate with binary numbers, a good guess would be this are just binary representations of numbers. Lo and behold, you’ve discovered an &lt;em&gt;unsigned&lt;/em&gt; 8-bit integer representation system. Converting to decimal, the values yield:&lt;/p&gt;

&lt;pre&gt;
001: [0] [0] [0] [0] [0] [0] [0] [0] = 0
002: [0] [0] [0] [0] [0] [0] [0] [1] = 1
003: [0] [0] [0] [0] [0] [0] [1] [0] = 2
004: [0] [0] [0] [0] [0] [0] [1] [1] = 3
// ...
256: [1] [1] [1] [1] [1] [1] [1] [1] = 255
&lt;/pre&gt;

&lt;p&gt;Notice what &lt;em&gt;unsigned&lt;/em&gt; means - the values we’ve calculated are all non-negative. Also, we’re only able to represent integers from 0 to 255.&lt;/p&gt;

&lt;p&gt;Let’s think of a way to make our system &lt;em&gt;signed&lt;/em&gt; - let’s incorporate negative numbers.&lt;/p&gt;

&lt;p&gt;We want more or less even number of both, positive and negative numbers, so let’s make a wild guess and choose the first bit to represent the sign: &lt;code&gt;0&lt;/code&gt; means the number will be positive, &lt;code&gt;1&lt;/code&gt; negative:&lt;/p&gt;
&lt;pre&gt;
[0] [0] [0] [0] [0] [0] [0] [0] = +0
[0] [0] [0] [0] [0] [0] [0] [1] = +1
[0] [0] [0] [0] [0] [0] [1] [0] = +2
// ...
[0] [1] [1] [1] [1] [1] [1] [1] = +127
&lt;/pre&gt;
&lt;pre&gt;
[1] [0] [0] [0] [0] [0] [0] [0] = -0
[1] [0] [0] [0] [0] [0] [0] [1] = -1
[1] [0] [0] [0] [0] [0] [1] [0] = -2
// ...
[1] [1] [1] [1] [1] [1] [1] [1] = -127
&lt;/pre&gt;

&lt;p&gt;Voila! Our very first 8-bit signed integer system. Being very intuitive, this is a well known system called &lt;em&gt;signed magnitude&lt;/em&gt;. It was used by some ancient computers.&lt;/p&gt;

&lt;center&gt;
  &lt;figure&gt;
    &lt;img src=&quot;http://ed-thelen.org/comp-hist/BRL61-0546.jpg&quot; /&gt;
    &lt;figcaption&gt;IBM 7090&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/center&gt;

&lt;h3 id=&quot;enter-twos-complement&quot;&gt;Enter Two’s Complement&lt;/h3&gt;

&lt;p&gt;Through time, people had come up with a clever way of storing integers, so that common math problems are simple to implement and there are no multiple zero representations.&lt;/p&gt;

&lt;blockquote&gt;
For an arbitrary n-bit binary number, to get its opposite representation, first invert the number, then add 1.
&lt;/blockquote&gt;

&lt;p&gt;This simple algorithm forms Two’s Complement, the most commonly used signed number representation system in use today. &lt;/p&gt;

&lt;p&gt;Let’s do an example: find the opposite value of the binary number &lt;code&gt;00001010&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
~ 00001010 // invert value
= 11110101 // result of inverted value
+ 00000001 // add 1
= 11110110 // final result
&lt;/pre&gt;

&lt;p&gt;Let’s check what the opposite number of &lt;code&gt;11110110&lt;/code&gt; is - if the algorithm is well-defined, the result should be &lt;code&gt;00001010&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
~ 11110110 // invert value
= 00001001 // result of inverted value
+ 00000001 // add 1
= 00001010 // final result
&lt;/pre&gt;

&lt;p&gt;Now for a more juicy example. What’s the opposite binary number of &lt;code&gt;00000000&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;
~  00000000 // invert value
=  11111111 // result of inverted value
+  00000001 // add 1
= 100000000 // final result
&lt;/pre&gt;

&lt;p&gt;The result is a 9-bit number in an 8-bit number system. This is called an &lt;em&gt;overflow&lt;/em&gt; since the value is, well, overflowing the 8-bit size restriction. The overflow is usually discarded, leaving us with the first eight bits from the right, &lt;code&gt;00000000&lt;/code&gt;. We just showed that there is exactly one representation of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sign&quot;&gt;Sign&lt;/h3&gt;

&lt;p&gt;In Two’s Complement, the most significant bit represents the sign. &lt;code&gt;0&lt;/code&gt; means the number will be positive, &lt;code&gt;1&lt;/code&gt; negative. The implication is that with &lt;em&gt;n&lt;/em&gt; bits, you can only use &lt;em&gt;(n-1)&lt;/em&gt; bits to represent the number, as one bit is reserved to denote the sign. &lt;/p&gt;

&lt;p&gt;You may think of &lt;code&gt;01001010&lt;/code&gt; as a compound value consisting of &lt;code&gt;0&lt;/code&gt; (sign) and &lt;code&gt;1001010&lt;/code&gt; (actual binary number). &lt;/p&gt;

&lt;h3 id=&quot;but-i-cant-think-in-binary&quot;&gt;But I can’t think in binary&lt;/h3&gt;

&lt;p&gt;Converting a binary value &lt;code&gt;01001010&lt;/code&gt; to decimal is simple. Ignoring the most significant bit, we get &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; 0 * 2^{0} + 1 * 2^{1} + 0 * 2^{2} + 1 * 2^{3} + 1 * 2^{6} = 138 &lt;/script&gt;

&lt;p&gt;What about &lt;code&gt;10001010&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;This is a negative value, since the most significant bit is &lt;code&gt;1&lt;/code&gt;. To get the actual value, we can apply Two’s Complement algorithm, ignoring the first bit: &lt;/p&gt;

&lt;pre&gt;
~ 0001010 // invert value
= 1110101 // result of inverted value
+ 0000001 // add 1
= 1110110 // final result
&lt;/pre&gt;

&lt;p&gt;Then, &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; 0 * 2^{0} + 1 * 2^{1} + 1 * 2^{3} + 0 * 2^{4} + 1 * 2^{5} + 1 * 2^{6} + 1 * 2^{7} = 118 &lt;/script&gt;

&lt;p&gt;Because the most significant bit is &lt;code&gt;1&lt;/code&gt;, the decimal number we calculated is negative. Therefore, &lt;code&gt;10001010 == -118&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-about-the-bounds&quot;&gt;What about the bounds?&lt;/h3&gt;

&lt;p&gt;In 8-bit unsigned integer system, we could represent integers from 0 to 255. With 8-bit sign and magnitude, we could represent numbers from -127 to 127. What about Two’s Complement bounds?&lt;/p&gt;

&lt;p&gt;Let’s first look at 3-bit two’s complement binary numbers and its decimal values:&lt;/p&gt;

&lt;center&gt;
&lt;table style=&quot;width:300px; text-align:center&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Bits&lt;/th&gt;
    &lt;th&gt;Values&lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;000&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;001&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;010&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr style=&quot;border-bottom: 2px solid #ccc;&quot;&gt;
    &lt;td&gt;011&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;

 &lt;tr&gt;
    &lt;td&gt;100&lt;/td&gt;
    &lt;td&gt;-4&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;101&lt;/td&gt;
    &lt;td&gt;-3&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;110&lt;/td&gt;
    &lt;td&gt;-2&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;111&lt;/td&gt;
    &lt;td&gt;-1&lt;/td&gt;
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;Since one bit represents the sign, there are only two bits available for binary numbers. The upper bound seems to be 3 or \(2^{2} - 1\). The lower bound is -4 or \(-2^{2}\)&lt;/p&gt;

&lt;p&gt;Let’s do the same thing for 4-bit numbers:&lt;/p&gt;

&lt;center&gt;
&lt;table style=&quot;width:300px; text-align:center&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Bits&lt;/th&gt;
    &lt;th&gt;Values&lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;0000&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;0001&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;0010&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;0011&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;

 &lt;tr&gt;
    &lt;td&gt;0100&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;0101&lt;/td&gt;
    &lt;td&gt;5&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;0110&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr style=&quot;border-bottom: 2px solid #ccc;&quot;&gt;
    &lt;td&gt;0111&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
  &lt;/tr&gt;

 &lt;tr&gt;
    &lt;td&gt;1000&lt;/td&gt;
    &lt;td&gt;-8&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;1001&lt;/td&gt;
    &lt;td&gt;-7&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;1010&lt;/td&gt;
    &lt;td&gt;-6&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;1011&lt;/td&gt;
    &lt;td&gt;-5&lt;/td&gt;
  &lt;/tr&gt;

 &lt;tr&gt;
    &lt;td&gt;1100&lt;/td&gt;
    &lt;td&gt;-4&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;1101&lt;/td&gt;
    &lt;td&gt;-3&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;1110&lt;/td&gt;
    &lt;td&gt;-2&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;1111&lt;/td&gt;
    &lt;td&gt;-1&lt;/td&gt;
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;Again, one bit represents the sign, so there are three bits available for binary numbers. The upper bound seems to be 7 or \(2 ^ {3} - 1\). The lower bound is -8 or \(-2^{3}\)&lt;/p&gt;

&lt;p&gt;Notice the bounds pattern for number of bits:&lt;/p&gt;

&lt;center&gt;
&lt;table style=&quot;width:550px; text-align:center&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Number of bits&lt;/th&gt;
    &lt;th&gt;Lower bound&lt;/th&gt;
    &lt;th&gt;Upper bound&lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;-4&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;-8&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;-16&lt;/td&gt;
    &lt;td&gt;15&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
  &lt;/tr&gt;

 &lt;tr&gt;
    &lt;td&gt;n&lt;/td&gt;
    &lt;td&gt;\(-2^{n - 1}\)&lt;/td&gt;
    &lt;td&gt;\(2^{n - 1} - 1\)&lt;/td&gt;
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/center&gt;

&lt;h3 id=&quot;the-grand-finale&quot;&gt;The grand finale&lt;/h3&gt;

&lt;p&gt;Let’s look at one more example. What is the opposite value of binary number &lt;code&gt;100&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;
~ 100 // invert value
= 011 // result of inverted value
+ 001 // add 1
= 100 // final result
&lt;/pre&gt;

&lt;p&gt;The opposite value of &lt;code&gt;100&lt;/code&gt; is the exact same value. Weird. Let’s do one more. What’s the opposite value of &lt;code&gt;1000&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;
~ 1000 // invert value
= 0111 // result of inverted value
+ 0001 // add 1
= 1000 // final result
&lt;/pre&gt;

&lt;p&gt;Again, the opposite value remains the same. Does this hold for any &lt;em&gt;n-bit&lt;/em&gt; value, too?&lt;/p&gt;

&lt;pre&gt;
~ 1000 ... 00 // invert value
= 0111 ... 11 // result of inverted value
+ 0000 ... 01 // add 1
= 1000 ... 00 // final result
&lt;/pre&gt;

&lt;p&gt;Yes, it does. But what are this values? &lt;/p&gt;

&lt;center&gt;
&lt;table style=&quot;width:500px; text-align:center&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Number of bits&lt;/th&gt;
    &lt;th&gt;Bit value&lt;/th&gt;
    &lt;th&gt;Decimal value&lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;100&lt;/td&gt;
    &lt;td&gt;-4&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;1000&lt;/td&gt;
    &lt;td&gt;-8&lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;10000&lt;/td&gt;
    &lt;td&gt;-16&lt;/td&gt;
  &lt;/tr&gt;
  
   &lt;tr&gt;
    &lt;td&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
   &lt;td&gt;n&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;\(-2^{n - 1}\)&lt;/td&gt; 
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;The values are lower bounds. We’ve shown that in Two’s Complement, the opposite value of a lower bound is still the lower bound. &lt;/p&gt;

&lt;p&gt;This is relevant because &lt;code&gt;-2147483648 == Integer.MIN_VALUE&lt;/code&gt;, a lower bound for &lt;code&gt;int&lt;/code&gt; type in Java. We know now the opposite value of a lower bound is still the lower bound, which explains why &lt;code&gt;Math.abs(-2147483648) != 2147483648&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/twos-complement-and-absolute-values/&quot;&gt;Two&#39;s Complement And Absolute Values&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on July 21, 2013.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Java Operators I Thought I Knew]]></title>
 <link rel="alternate" type="text/html" href="/java-operators-i-thought-i-knew/" />
  <id>/java-operators-i-thought-i-knew</id>
  <published>2013-05-27T00:00:00-04:00</published>
  <updated>2013-05-27T00:00:00-04:00</updated>
  <author>
    <name>Tadej Slamic</name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;Today, I stumbled upon &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html&quot;&gt;Java Tutorial Operators&lt;/a&gt; page. &lt;/p&gt;

&lt;p&gt;I glanced the list, wondering if I know what each operator does. As you might have guessed from the title, I failed. Luckily, I failed at only two operators. &lt;/p&gt;

&lt;h3 id=&quot;the-modulo-operator-&quot;&gt;The modulo operator %&lt;/h3&gt;

&lt;p&gt;While mostly defined in the same fashion, implementations of &lt;em&gt;modulo&lt;/em&gt; or &lt;em&gt;reminder&lt;/em&gt; operator differ when it comes to the sign of a result. For example, a modulo operator in Python might yield a different result than a modulo operator in Java, using the exact same data. Try it out for yourself, evaluate the expression &lt;code&gt;-1 % 2&lt;/code&gt; for instance.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;It boils down to the decision language designers made when defining the operator. Recall that in an expression &lt;code&gt;a % b = c&lt;/code&gt;,
&lt;code&gt;a&lt;/code&gt; is said to be the &lt;em&gt;dividend&lt;/em&gt; and &lt;code&gt;b&lt;/code&gt; the &lt;em&gt;divisor&lt;/em&gt;. Some decided &lt;code&gt;c&lt;/code&gt; should have the same sign as the dividend, others divisor. Java chose dividend, Python divisor.&lt;/p&gt;

&lt;p&gt;Missing this fact could lead to some “fun” late night debugging sessions. Consider the following example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Returns true if value is odd, false otherwise.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works wonderful with a positive argument. But since the definition of an odd number is quite natural for any negative integer too, does &lt;code&gt;isOdd(-1)&lt;/code&gt; produce a correct result? &lt;/p&gt;

&lt;p&gt;Java uses the dividend when determining the sign of a modulo operation. Therefore, if the argument we pass to &lt;code&gt;isOdd&lt;/code&gt; is negative, the modulo operation yields a negative result. In our case &lt;code&gt;-1 % 2 == -1&lt;/code&gt;, and &lt;code&gt;isOdd(-1) == false&lt;/code&gt;. The result is not what one would expect.&lt;/p&gt;

&lt;p&gt;A quick fix could apply absolute value to a dividend. A better solution, albeit a bit cryptic, would be to just check the last bit of a number and avoid the modulo operator altogether:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Returns true if value is odd, false otherwise.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-unsigned-right-shift-&quot;&gt;The unsigned right shift &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The second operator I was having trouble with was &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. I couldn’t tell the difference with &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator, so I had to check the definition: &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;is an &lt;em&gt;unsigned&lt;/em&gt; right shift whereas &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; is &lt;em&gt;signed&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Confused? Read on.&lt;/p&gt;

&lt;center&gt;
&lt;figure&gt;
  &lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Most_significant_bit.svg/300px-Most_significant_bit.svg.png&quot; alt=&quot;Most Significant Bit&quot; /&gt;
  &lt;figcaption&gt;The most significant bit is highlighted.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator uses the most-significant bit value when shifting a bit pattern, whereas &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; uses &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we’re operating with 4-bit two’s complement numbers. Take a binary number, e.g. &lt;code&gt;0001&lt;/code&gt;. The most significant bit is &lt;code&gt;0&lt;/code&gt;. Performing a shift, say &lt;code&gt;0001 &amp;gt;&amp;gt; 1&lt;/code&gt;, the value you’ll be shifting with is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now consider the binary number &lt;code&gt;1001&lt;/code&gt;. The most significant bit in this case is &lt;code&gt;1&lt;/code&gt;, so the value you’ll be shifting with is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
0001 &amp;gt;&amp;gt; 1 == 0000
1001 &amp;gt;&amp;gt; 1 == 1100
&lt;/pre&gt;

&lt;p&gt;Regardless of the most significant bit value, an unsigned right shift operator &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; always uses &lt;code&gt;0&lt;/code&gt; as the shifting value. &lt;code&gt;0001&lt;/code&gt; will be shifted with &lt;code&gt;0&lt;/code&gt; as before, but so will &lt;code&gt;1001&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
0001 &amp;gt;&amp;gt;&amp;gt; 1 = 0000
1001 &amp;gt;&amp;gt;&amp;gt; 1 = 0100
&lt;/pre&gt;

&lt;p&gt;You may notice there is no unsigned left shift operator. Any nontrivial &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; shift will actually move the significant bit out of the picture: &lt;code&gt;1001 &amp;lt;&amp;lt; 1 == 0010&lt;/code&gt;. Shifting by 1 to the left will transform -7 to 2, changing signs along the way. Therefore, the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator itself is already &lt;em&gt;unsigned&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/java-operators-i-thought-i-knew/&quot;&gt;Java Operators I Thought I Knew&lt;/a&gt; was originally published by Tadej Slamic at &lt;a href=&quot;&quot;&gt;Tadej's Blog&lt;/a&gt; on May 27, 2013.&lt;/p&gt;
  </content>
</entry>

</feed>
